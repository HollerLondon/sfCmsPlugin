<?php

/**
 * Listing
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    site_cms
 * @subpackage model
 * @author     Jo Carter
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginListing extends BaseListing 
{  
  /**
     * Creates an unsaved Listing object from the Sitetree
     *
     * @param Sitetree $sitetree
     * @return Listing
     */
    public static function createFromSitetree($sitetree) 
  {
      $listing = new Listing();
      $listing->sitetree_id = $sitetree->id;
      
      return $listing;
    }
    
  /**
     * Update a new Listing with a content group
     */
    public function updateNew() 
  {
      $group = contentGroup::createNew('Listing');
      $this->ContentGroup = $group;
      $this->save();
    }
    
  /**
   * Render one of the fragments for this Listing.
   *
   * The ContentGroup must be initialised first.
   *
   * @param string $identifier
   * @param array $extraParams
   */
    public function renderContent($identifier, $extraParams = array()) 
  {
        return $this->ContentGroup->renderContent($identifier, $extraParams);
    }
    
  /**
   * Handle the site events - e.g: routing
   *
   * @param siteEvent $event
   */
  public static function siteEventHandler($event) 
  {
    if ($event->getName() == siteEvent::SITETREE_DELETE) 
    {
      // node has been deleted - delete the Listing
      $sitetree = $event->getSubject();
      $listing = ListingTable::getInstance()->findOneBySitetreeId($sitetree->id);
      
      if (!$listing) 
      {
          // there is no Listing at this node to delete
          return;
      }
      
      $listing->delete();
    } 
    else if ($event->getName() == siteEvent::SITETREE_ROUTING) 
    {
      // handle the routing... i.e: register our routes.
      $sitetree = $event->getSubject();
      $params = $event->getParameters();
      $routingProxy = $params['routingProxy'];
      $urlStack = $params['urlStack'];
      
      $nodeUrl = Sitetree::makeUrl($sitetree, $urlStack);
      
      // add in index route
      $routingProxy->addRoute(
        $sitetree,
        '',
        $nodeUrl,
        array('module' => 'listingDisplay', 'action' => 'index')
      );
      
      // add in item route
      $routingProxy->addRoute(
        $sitetree,
        'item',
        $nodeUrl . '/item/:slug',
        array('module' => 'listingDisplay', 'action' => 'item')
      );
      
      // add in category routes
      $routingProxy->addRoute(
        $sitetree,
        'category_item',
        $nodeUrl . '/:category/item/:slug',
        array('module' => 'listingDisplay', 'action' => 'item')
      );
      
      $routingProxy->addRoute(
        $sitetree,
        'category',
        $nodeUrl . '/:category',
        array('module' => 'listingDisplay', 'action' => 'index')
      );
      
      // add in pagination route
      $routingProxy->addRoute(
            $sitetree,
            'page',
            $nodeUrl . '/page/:page',
            array('module' => 'listingDisplay', 'action' => 'index')
        );
        
        $routingProxy->addRoute(
            $sitetree,
            'category_page',
            $nodeUrl . '/:category/page/:page',
            array('module' => 'listingDisplay', 'action' => 'index')
        );
      
        // rss route
        $routingProxy->addRoute(
            $sitetree,
            'rss',
            $nodeUrl . '/rss',
            array('module' => 'listingDisplay', 'action' => 'rss')
        );
          
        // atom route
        $routingProxy->addRoute(
            $sitetree,
            'atom',
            $nodeUrl . '/atom',
            array('module' => 'listingDisplay', 'action' => 'atom')
        );
    }
  }
  
  /**
   * Handle when the content for this Listing (eg. content blocks or properties) has changed.
   */
  public function handleContentChanged() 
  {
      // This removes the cached pages from both the Listing and the items (and rss feed)
      siteManager::getInstance()->getCache()->removePattern("Listing.{$this->id}.*");
  }
  
  /**
   * Delete
   *
   * @param Doctrine_Connection $conn
   */
  public function delete(Doctrine_Connection $conn = null) 
  {
      // delete all of the associated Listing items first
    $manager = listingManager::getInstance();
    $itemClass = $manager->getListItemClass($this->template);
    $items = Doctrine_Query::create()
          ->from($itemClass)
          ->where('listing_id = ?', array($listing->id))
          ->execute();
          
    foreach ($items as $item) 
    {
      $item->delete();
    }
        
      // delete associated Listing contentGroup
      $this->ContentGroup->delete();
      
      // finally, delete the Listing
      parent::delete($conn);
  }
}
